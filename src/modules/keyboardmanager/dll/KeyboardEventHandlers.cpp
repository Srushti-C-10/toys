#include "pch.h"
#include "KeyboardEventHandlers.h"

// Function to set the value of a key event based on the arguments
void KeyboardEventHandlers::SetKeyEvent(LPINPUT keyEventArray, int index, DWORD inputType, WORD keyCode, DWORD flags, ULONG_PTR extraInfo)
{
    keyEventArray[index].type = inputType;
    keyEventArray[index].ki.wVk = keyCode;
    keyEventArray[index].ki.dwFlags = flags;
    if (KeyboardManagerHelper::IsExtendedKey(keyCode))
    {
        keyEventArray[index].ki.dwFlags |= KEYEVENTF_EXTENDEDKEY;
    }
    keyEventArray[index].ki.dwExtraInfo = extraInfo;
}

// Function to a handle a single key remap
intptr_t KeyboardEventHandlers::HandleSingleKeyRemapEvent(LowlevelKeyboardEvent* data, KeyboardManagerState& keyboardManagerState) noexcept
{
    // Check if the key event was generated by KeyboardManager to avoid remapping events generated by us.
    if (!(data->lParam->dwExtraInfo & CommonSharedConstants::KEYBOARDMANAGER_INJECTED_FLAG))
    {
        // The mutex should be unlocked before SendInput is called to avoid re-entry into the same mutex. More details can be found at https://github.com/microsoft/PowerToys/pull/1789#issuecomment-607555837
        std::unique_lock<std::mutex> lock(keyboardManagerState.singleKeyReMap_mutex);
        auto it = keyboardManagerState.singleKeyReMap.find(data->lParam->vkCode);
        if (it != keyboardManagerState.singleKeyReMap.end())
        {
            // If mapped to 0x0 then the key is disabled
            if (it->second == 0x0)
            {
                return 1;
            }

            int key_count = 1;
            LPINPUT keyEventList = new INPUT[size_t(key_count)]();
            memset(keyEventList, 0, sizeof(keyEventList));

            // Handle remaps to VK_WIN_BOTH
            DWORD target = it->second;
            // If a key is remapped to VK_WIN_BOTH, we send VK_LWIN instead
            if (target == CommonSharedConstants::VK_WIN_BOTH)
            {
                target = VK_LWIN;
            }

            if (data->wParam == WM_KEYUP || data->wParam == WM_SYSKEYUP)
            {
                SetKeyEvent(keyEventList, 0, INPUT_KEYBOARD, (WORD)target, KEYEVENTF_KEYUP, KeyboardManagerConstants::KEYBOARDMANAGER_SINGLEKEY_FLAG);
            }
            else
            {
                SetKeyEvent(keyEventList, 0, INPUT_KEYBOARD, (WORD)target, 0, KeyboardManagerConstants::KEYBOARDMANAGER_SINGLEKEY_FLAG);
            }

            lock.unlock();
            UINT res = SendInput(key_count, keyEventList, sizeof(INPUT));
            delete[] keyEventList;
            return 1;
        }
    }

    return 0;
}